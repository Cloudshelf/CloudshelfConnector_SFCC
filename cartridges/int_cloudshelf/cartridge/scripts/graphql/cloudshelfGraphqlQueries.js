module.exports = {
    query: {
        Cloudshelf: 'query ($id: GlobalId!) {    cloudshelf(id: $id) {      displayName      homeFrameCallToAction      id      theme {        id      }    }  }  ',
        Location: 'query ($id: GlobalId!) {    location(id: $id) {      address      countryCode      createdAt      devices {        createdAt        displayName        engineInfo        engineOrientation        engineSeenSinceLastChange        engineSizeInfo        engineType        engineUserAgent        engineVersionLastSeen        id        lastSeen        platformProvidedId        registered        registrationCode        screenSizeInches        status        updatedAt        visibilityType      }      displayName      id      metadata {        createdAt        data        id        key        platformProvidedId        updatedAt      }      owningOrganisation {        createdAt        displayName        domainName        eCommercePlatform        eCommercePlatformDisplayName        id        installCompleted        installSurveyAnswers        salesAssistantAllocation        salesAssistantClearRule        salesAssistantNameRule        uninstallStarted        updatedAt      }      platformProvidedId      salesAssistants {        createdAt        displayName        id        platformProvidedId        thirdPartyReference        updatedAt      }      updatedAt    }  }  ',
        Product: 'query ($id: GlobalId!) {    product(id: $id) {      createdAt      description      displayName      handle      id      metadata {        createdAt        data        id        key        platformProvidedId        updatedAt      }      owningOrganisation {        createdAt        displayName        domainName        eCommercePlatform        eCommercePlatformDisplayName        id        installCompleted        installSurveyAnswers        salesAssistantClearRule        salesAssistantNameRule        uninstallStarted        updatedAt      }      platformProvidedId      productGroups {        createdAt        displayName        handle        id        isAllProductGroup        platformProvidedId        productCount        updatedAt      }      productType      productVariants {        availableToPurchase        createdAt        currentPrice        displayName        id        isInStock        originalPrice        platformProvidedId        sku        updatedAt      }      tags      updatedAt      vendor    }  }  ',
        ProductGroup: 'query ($id: GlobalId!) {    productGroup(id: $id) {      createdAt      displayName      featuredImage {        available        createdAt        height        id        orientation        originalUrl        preferredImage        quality        updatedAt        url        width      }      handle      id      isAllProductGroup      metadata {        createdAt        data        id        key        platformProvidedId        updatedAt      }      owningOrganisation {        createdAt        displayName        domainName        eCommercePlatform        eCommercePlatformDisplayName        id        installCompleted        installSurveyAnswers        salesAssistantAllocation        salesAssistantClearRule        salesAssistantNameRule        uninstallStarted        updatedAt      }      platformProvidedId      productCount      products {        createdAt        description        displayName        handle        id        platformProvidedId        productType        remoteUpdatedAt        tags        updatedAt        vendor      }      updatedAt    }  }  ',
        ProductGroups: 'query (    $first: Int  ) {    productGroups(      first: $first    ) {      edges {        cursor,        node {          id          displayName          isAllProductGroup          productCount        }      }      pageInfo {        endCursor        hasNextPage        hasPreviousPage        startCursor      }      totalCount    }  }',
        Products: 'query (    $first: Int  ) {    products(      first: $first    ) {      edges {        cursor,        node {          id          displayName        }      }      pageInfo {        endCursor        hasNextPage        hasPreviousPage        startCursor      }      totalCount    }  }  ',
        Theme: 'query ($id: GlobalId!) {    theme(id: $id) {      displayName      id      logoUrl    }  }  ',
    },
    mutation: {
        DeleteProductGroups: 'mutation DeleteProductGroups($ids: [GlobalId!]!) {      deleteProductGroups(ids: $ids) {          productGroups {              id          }          userErrors {              code              message          }      }  }',
        DeleteProducts: 'mutation DeleteProducts($ids: [GlobalId!]!) {      deleteProducts(ids: $ids) {          products {              id          }          userErrors {              code              message          }      }  }',
        UpdateProductsInProductGroup: 'mutation UpdateProductsInProductGroup($productGroupId: GlobalId!, $productIds: [GlobalId!]!) {      updateProductsInProductGroup(productGroupId: $productGroupId, productIds: $productIds)  }',
        UpsertCloudshelves: 'mutation upsertCloudshelf($input: [CloudshelfInput!]!) {      upsertCloudshelves(input: $input) {          cloudshelves {              id          }          userErrors {              code              message          }      }  }',
        UpsertLocations: 'mutation UpsertLocations($input: [LocationInput!]!) {      upsertLocations(input: $input) {          locations {              id          }          userErrors {              code              message          }      }  }',
        upsertOrders: 'mutation upsertOrders($input: [OrderInput!]!) {      upsertOrders(input: $input) {          userErrors {              code              message          }          orders {              id              status          }      }  }',
        UpsertProductGroups: 'mutation UpsertProductGroups($input: [ProductGroupInput!]!) {      upsertProductGroups(input: $input) {          productGroups {              id          }          userErrors {              code              message          }      }  }',
        UpsertProducts: 'mutation UpsertProducts($input: [ProductInput!]!) {      upsertProducts(input: $input) {          products {              id          }          userErrors {              code              message          }      }  }',
        UpsertProductVariants: 'mutation UpsertProductVariants($inputs: [UpsertVariantsInput!]!) {      upsertProductVariants(inputs: $inputs) {          productVariants {              id          }          userErrors {              code              message          }      }  }',
        UpsertTheme: 'mutation upsertTheme($input: ThemeInput!) {      upsertTheme(input: $input) {          userErrors {              code              message          }          theme {              id          }      }  }',
    }
};
