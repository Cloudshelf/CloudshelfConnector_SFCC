diff --git a/test/unit/int_cloudshelf/scripts/cloudshelfHelper.spec.js b/test/unit/int_cloudshelf/scripts/cloudshelfHelper.spec.js
index c948f55..ec585bf 100644
--- a/test/unit/int_cloudshelf/scripts/cloudshelfHelper.spec.js
+++ b/test/unit/int_cloudshelf/scripts/cloudshelfHelper.spec.js
@@ -8,7 +8,6 @@ const getThemeStub = sinon.stub();
 const upsertThemeStub = sinon.stub();
 const getCloudshelfStub = sinon.stub();
 const upsertCloudshelvesStub = sinon.stub();
-const getCustomPreferenceValueStub = sinon.stub();
 
 function CloudshelfApiModelMock() { };
 CloudshelfApiModelMock.prototype.getTheme = getThemeStub;
@@ -16,6 +15,12 @@ CloudshelfApiModelMock.prototype.upsertTheme = upsertThemeStub;
 CloudshelfApiModelMock.prototype.getCloudshelf = getCloudshelfStub;
 CloudshelfApiModelMock.prototype.upsertCloudshelves = upsertCloudshelvesStub;
 
+require('babel-register')({
+    plugins: ['babel-plugin-rewire']
+});
+
+let customPreferenceValue;
+
 describe('cloudshelfHelper', function () {
     const cloudshelfHelper = proxyquire('../../../../cartridges/int_cloudshelf/cartridge/scripts/helpers/cloudshelfHelper', {
         '~/cartridge/models/cloudshelf/cloudshelfApiModel': CloudshelfApiModelMock,
@@ -35,7 +40,7 @@ describe('cloudshelfHelper', function () {
         'dw/system/Site': {
             getCurrent: () => {
                 return {
-                    getCustomPreferenceValue: getCustomPreferenceValueStub
+                    getCustomPreferenceValue: () => customPreferenceValue
                 }
             }
         }
@@ -45,4 +50,33 @@ describe('cloudshelfHelper', function () {
         const result = cloudshelfHelper.getGlobalId('type', 'id')
         assert.equal(result, 'gid://external/type/id');
     });
+
+    // eslint-disable-next-line no-underscore-dangle
+    const getPropertyByPath = cloudshelfHelper.__get__('getPropertyByPath');
+    it('should return correct property value', function () {
+        let object = {
+            "id": "unitId",
+            "name": "unitName",
+            "deeper": {
+                "key": "unitKey",
+                "data": "desiredValue"
+            }
+        }
+        let path = 'deeper.data';
+        assert.equal(getPropertyByPath(object, path), 'desiredValue');
+    });
+
+    it('should return correct metadata object', function () {
+        let object = {
+            "id": "unitId",
+            "name": "unitName",
+            "deeper": {
+                "key": "unitKey",
+                "data": "desiredValue"
+            }
+        }
+        customPreferenceValue = '{"id" : "cloudShelfId", "name" : "cloudShelfKey"}';
+        assert.equal(JSON.stringify(cloudshelfHelper.getMetadata(object)), 
+            '[{"data":"unitId","key":"cloudShelfId"},{"data":"unitName","key":"cloudShelfKey"}]');
+    });
 });
